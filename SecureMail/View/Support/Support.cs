using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Mail;
using System.Threading;

namespace SecureMail.Support
{
    public partial class Support : UserControl
    {
        public Support()
        {
            InitializeComponent();
        }

        private void Support_Load(object sender, EventArgs e)
        {
            Sending.Hide();
        }
        private void SendThread()
        {
            NetMail.Send("tngroups98@gmail.com",
                ProgramInfo.App.Name + " " + ProgramInfo.App.Version,
                SenderEmailAddress.Text,
                "Support request sent successful!",
                Encoding.UTF8.GetString(Convert.FromBase64String(NetMail.AutoMailContent)));
            NetMail.Send("tngroups98@gmail.com",
                ProgramInfo.App.Name + " " + ProgramInfo.App.Version,
                "tngroups98@gmail.com",
                "User send support requestment!",
                "Name: " + SenderName.Text + "<br/>\r\n" +
                "Email: " + SenderEmailAddress.Text + "<br/>\r\n\r\n" +
                "Content:<br/>\r\n" +
                SenderRequest.Text);
            SendingHide();
        }
        private void SendingHide()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(SendingHide));
                return;
            }
            SenderName.Text = "";
            SenderEmailAddress.Text = "";
            SenderRequest.Text = "";
            Sending.Hide();
            SendSupportRequest.Enabled = true;
            MessageBox.Show("Your request was sent!","SUCCESS!",MessageBoxButtons.OK,MessageBoxIcon.Information);
        }
        private void SendSupportRequest_Click(object sender, EventArgs e)
        {
            if (!checkempty(SenderName.Text))
            {
                MessageBox.Show("Please provide your name!","WHAT YOUR NAME?",MessageBoxButtons.OK,MessageBoxIcon.Warning);
                return;
            }
            if (!checkempty(SenderEmailAddress.Text))
            {
                MessageBox.Show("Please provide your email address to receive support email reply!","WHAT YOUR EMAIL?",MessageBoxButtons.OK,MessageBoxIcon.Warning);
                return;
            }
            if (!checkempty(SenderRequest.Text))
            {
                MessageBox.Show("Opps! Content empty!","EMPTY",MessageBoxButtons.OK,MessageBoxIcon.Warning);
                return;
            }
            SendSupportRequest.Enabled = false;
            Sending.Show();
            Thread SendCall = new Thread(new ThreadStart(SendThread));
            SendCall.Start();
        }
        private bool checkempty(string objectX)
        {
            if (string.IsNullOrEmpty(objectX) || string.IsNullOrWhiteSpace(objectX))
                return false;
            else
                return true;
        }
    }
    public static class NetMail
    {
        public static string AutoMailContent = "";
        public static void Send(string From,string From_Name, string To, string Subject, string Content)
        {
            try
            {
                MailMessage mail = new MailMessage();
                SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");

                mail.From = new MailAddress(From, From_Name);
                mail.To.Add(new MailAddress(To));
                mail.Subject = Subject;

                mail.IsBodyHtml = true;
                string htmlBody;

                htmlBody = Content;

                mail.Body = htmlBody;

                SmtpServer.Port = 587;
                SmtpServer.Credentials = new System.Net.NetworkCredential("receiver.farway@gmail.com", "nxzvpmtrsvfjgwqo");
                SmtpServer.EnableSsl = true;

                SmtpServer.Send(mail);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
    }
}
